from django.urls import reverse
from django.db import models
from accounts.models import Student
# Create your models here.

class Semester(models.Model):
    semester_number = models.PositiveSmallIntegerField(blank=False, null=False, unique=True)

    def __str__(self):
        return str(self.semester_number)

    class Meta:
        ordering = ["semester_number"]

class Department(models.Model):
    department_id = models.CharField(blank=False, max_length=15, unique=True)
    department_name = models.CharField(blank=False, max_length=100, unique=True)

    def __str__(self):
        return self.department_id

    class Meta:
        ordering = ["department_name"]

class Teacher(models.Model):
    teacher_id = models.CharField(blank=False, max_length=15, unique=True)
    teacher_name = models.CharField(blank=False, max_length=100, unique=True)
    department = models.ManyToManyField(Department)

    def __str__(self):
        return self.teacher_name

    class Meta:
        ordering = ["teacher_name"]

class Subject(models.Model):
    subject_code = models.CharField(blank=False, max_length=15, unique=True)
    subject_name = models.CharField(blank=False, max_length=100, unique=True)
    semester = models.ManyToManyField(Semester)
    department = models.ManyToManyField(Department)
    teacher = models.ManyToManyField(Teacher)

    def __str__(self):
        return self.subject_name

    class Meta:
        ordering = ["subject_name"]

choices = (
            (1,'Unsatisfactory'),
            (2,'Satisfactory'),
            (3,'Good'),
            (4,'Very Good'),
            (5,'Outstanding')
            )

class feedback(models.Model):
    student = models.ForeignKey(Student, related_name="feedbacks", on_delete=models.CASCADE, null = False, blank = False)
    subject = models.ForeignKey(Subject, related_name="feedbacks", on_delete=models.CASCADE, null = False, blank = False)
    teacher = models.ForeignKey(Teacher, related_name="feedbacks", on_delete=models.CASCADE, null = False, blank = False)
    created_at = models.DateTimeField(auto_now=True)
    param1 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "The objectives of this course were made clear to me by this teacher.")
    param2 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "The teacher speaks, articulates and explains concepts clearly.")
    param3 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "The teacher adheres to the timings schedule and enforces discipline in the class.")
    param4 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "Interest generated by the teacher.")
    param5 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "The lectures were well structured and focused on the topics.")
    param6 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "Accessibility of the teacher in and out of the class.")
    param7 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "The teacher has fair knowledge on the subject matter.")
    param8 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "Effective use of teaching aids.")
    param9 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "Time spend on lecturing by teacher for course coverage was sufficient and lesson plan was followed.")
    param10 = models.PositiveSmallIntegerField(default = None, blank=False, null=False, choices=choices, verbose_name = "The teacher encourage students to raise pertinent questions and answer them.")
    total = models.PositiveIntegerField()
    average = models.FloatField()
    message = models.CharField(blank=True, max_length=100, null=True, verbose_name = "Anything else you want to say.")

    def __str__(self):
        return self.teacher.teacher_name+' for '+self.subject.subject_name+' by '+self.student.user.username

    def get_absolute_url(self):
        return reverse(
            "feedbacks:single",
            kwargs={"username": self.student.user.username, "pk": self.pk})

    def save(self, *args, **kwargs):
        self.total = (self.param1 + self.param2 + self.param3 + self.param4 + self.param5 + self.param6 + self.param7 +self. param8 + self.param9 + self.param10)
        self.average = (self.param1 + self.param2 + self.param3 + self.param4 + self.param5 + self.param6 + self.param7 +self. param8 + self.param9 + self.param10)/10
        super().save(*args, **kwargs)

    class Meta:
        ordering = ["-created_at"]
        unique_together = [("student", "subject"),
                            ("student","teacher")]
